---
import ColorSwatch from './ColorSwatch.astro';

interface ColorGroup {
  name: string;
  colors: string[];
  description: string;
}

interface Palette {
  colors: Record<string, string>;
}

interface Props {
  group: ColorGroup;
  palette: Palette;
  cssVariableMap: Record<string, string>;
  class?: string;
}

const { group, palette, cssVariableMap, class: className = '' } = Astro.props;

// Filter colors that exist in the palette
const availableColors = group.colors.filter(colorKey => 
  palette.colors[colorKey as keyof typeof palette.colors]
);
---

<div class:list={["color-group", className]}>
  <div class="group-header mb-4">
    <h4 class="text-lg font-semibold theme-headline mb-1">{group.name}</h4>
    <p class="text-sm theme-paragraph">{group.description}</p>
  </div>
  
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
    {availableColors.map((colorKey) => {
      const colorValue = palette.colors[colorKey as keyof typeof palette.colors];
      const cssVar = cssVariableMap[colorKey];
      return (
        <ColorSwatch 
          colorKey={colorKey}
          colorValue={colorValue}
          cssVar={cssVar}
        />
      );
    })}
  </div>
</div>

<style>
  /* Responsive grid adjustments */
  @media (max-width: 640px) {
    .grid {
      grid-template-columns: 1fr;
    }
  }
</style>