---
import colorPalettes from "@/data/color-palettes.json";
import PaletteOption from "@/components/ThemeComponents/PaletteOption.astro";
---

<div class="color-palette-selector fixed top-1/2 right-4 transform -translate-y-1/2 z-50">
  <!-- Toggle Button -->
  <button
    id="palette-toggle"
    class="palette-toggle-btn w-12 h-12 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 theme-bg border-2"
    style="border-color: var(--color-theme-stroke);"
    aria-label="Toggle color palette selector"
    aria-expanded="false">
    <svg
      class="w-6 h-6 theme-headline"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z">
      </path>
    </svg>
  </button>

  <!-- Palette Selector Panel -->
  <div
    id="palette-panel"
    class="palette-panel absolute top-0 w-80 max-h-96 overflow-y-auto rounded-lg shadow-2xl border transform translate-x-full opacity-0 transition-all duration-300 theme-bg"
    style="border-color: var(--color-theme-stroke); right: 64px;">
    
    <div class="p-4 border-b" style="border-color: var(--color-theme-stroke);">
      <h3 class="text-lg font-semibold theme-headline">Color Palettes</h3>
      <p class="text-sm theme-paragraph mt-1">Choose a color palette to customize the site</p>
    </div>

    <div class="p-4 space-y-3">
      {colorPalettes.palettes.map((palette) => (
        <PaletteOption palette={palette} />
      ))}
    </div>
  </div>
</div>

<style>
  .color-palette-selector {
    z-index: 1000;
  }
  
  .color-palette-selector .palette-toggle-btn {
    transition: all 0.3s ease;
  }
  
  .color-palette-selector .palette-toggle-btn:hover {
    transform: scale(1.1);
  }
  
  .palette-panel {
    z-index: 999;
    pointer-events: none;
    visibility: hidden;
    transform: translateX(100%);
    opacity: 0;
  }
  
  .palette-panel.open {
    transform: translateX(-100%) !important;
    opacity: 1 !important;
    pointer-events: auto;
    visibility: visible;
  }
  
  
  
  /* Ensure the panel starts hidden */
  .palette-panel:not(.open) {
    transform: translateX(100%);
    opacity: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    class ColorPaletteSelector {
      /** @type {HTMLButtonElement | null} */
      toggleBtn;
      /** @type {HTMLElement | null} */
      panel;
      /** @type {NodeListOf<HTMLButtonElement>} */
      options;
      /** @type {string} */
      currentTheme;
      constructor() {
        this.toggleBtn = document.getElementById('palette-toggle');
        this.panel = document.getElementById('palette-panel');
        this.options = document.querySelectorAll('.palette-option');
        this.currentTheme = this.getStoredTheme() || 'palette-1';
        
        if (!this.toggleBtn || !this.panel) {
          console.warn('Color palette selector elements not found');
          return;
        }
        
        this.init();
      }

      init() {
        // Set initial theme immediately (before loading screen fades)
        this.applyTheme(this.currentTheme);
        this.updateActiveOption();
        
        // Notify loading screen that theme is ready
        this.notifyThemeReady();
        
        // Event listeners
        this.toggleBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.togglePanel();
        });
        
        this.options.forEach(option => {
          option.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            const theme = e.currentTarget.dataset.theme;
            if (theme) {
              this.selectTheme(theme);
            }
          });
        });
        
        // Close panel when clicking outside
        document.addEventListener('click', (e) => {
          const container = document.querySelector('.color-palette-selector') as HTMLElement | null;
          const targetNode = e.target as Node | null;
          const isInside = !!(container && targetNode && container.contains(targetNode));
          if (!isInside) {
            this.closePanel();
          }
        });
        
        // Handle escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            this.closePanel();
          }
        });
      }

      togglePanel() {
        const isOpen = this.panel.classList.contains('open');
        if (isOpen) {
          this.closePanel();
        } else {
          this.openPanel();
        }
      }

      openPanel() {
        this.panel.classList.add('open');
        this.toggleBtn.setAttribute('aria-expanded', 'true');
      }

      closePanel() {
        this.panel.classList.remove('open');
        this.toggleBtn.setAttribute('aria-expanded', 'false');
      }

      selectTheme(themeId) {
        this.currentTheme = themeId;
        this.applyTheme(themeId);
        this.storeTheme(themeId);
        this.updateActiveOption();
        this.closePanel();
      }

      applyTheme(themeId) {
        document.documentElement.setAttribute('data-theme', themeId);
        // Also apply to body for immediate effect
        document.body.setAttribute('data-theme', themeId);
      }

      updateActiveOption() {
        this.options.forEach(option => {
          option.classList.remove('active');
          if (option.dataset.theme === this.currentTheme) {
            option.classList.add('active');
          }
        });
      }

      storeTheme(themeId) {
        try {
          localStorage.setItem('selected-theme', themeId);
        } catch (e) {
          console.warn('Could not save theme to localStorage:', e);
        }
      }

      getStoredTheme() {
        try {
          return localStorage.getItem('selected-theme');
        } catch (e) {
          console.warn('Could not read theme from localStorage:', e);
          return null;
        }
      }
      
      notifyThemeReady() {
        // Dispatch custom event to notify loading screen that theme is ready
        const themeReadyEvent = new CustomEvent('themeReady', {
          detail: { themeId: this.currentTheme }
        });
        document.dispatchEvent(themeReadyEvent);
      }
    }

    // Initialize the color palette selector
    new ColorPaletteSelector();
  });
</script>