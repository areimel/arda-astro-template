---
import { Icon } from "astro-icon/components";
import Button from "@/components/ui/button.astro";

const WEB3FORMS_KEY = import.meta.env.WEB3FORMS_KEY ?? "";

interface Props {
  title?: string;
  subtitle?: string;
  steps?: string[];
  finalCtaText?: string;
  class?: string;
}

const {
  title = "Get Your Free Consultation",
  subtitle = "Tell us about your needs and we'll create a custom solution for you.",
  steps = ["Basic Info", "Your Needs", "Contact Details"],
  finalCtaText = "Get My Free Consultation",
  class: className,
} = Astro.props;
---

<section class:list={["py-16 md:py-20", className]}>
  <div class="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="text-center mb-8 md:mb-12">
      <h2 class="text-3xl md:text-4xl font-bold theme-headline mb-4">
        {title}
      </h2>
      {subtitle && (
        <p class="text-lg theme-paragraph">
          {subtitle}
        </p>
      )}
    </div>

    <!-- Progress Bar -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-4">
        {steps.map((step, index) => (
          <div class="flex items-center">
            <div 
              class="flex items-center justify-center w-8 h-8 rounded-full border-2 text-sm font-semibold transition-all duration-300"
              style="border-color: var(--color-theme-stroke);"
              data-step-indicator={index + 1}
            >
              <span class="theme-paragraph" data-step-number={index + 1}>{index + 1}</span>
              <Icon 
                name="bx:bx-check" 
                class="w-5 h-5 hidden"
                style="color: var(--color-theme-bg);"
                data-step-check={index + 1}
              />
            </div>
            {index < steps.length - 1 && (
              <div 
                class="w-12 md:w-20 h-0.5 mx-2 transition-all duration-300"
                style="background-color: var(--color-theme-stroke); opacity: 0.3;"
                data-step-line={index + 1}
              ></div>
            )}
          </div>
        ))}
      </div>
      <div class="flex justify-between text-xs theme-paragraph opacity-70">
        {steps.map((step) => (
          <span class="text-center">{step}</span>
        ))}
      </div>
    </div>

    <!-- Form Container -->
    <div class="theme-card-bg border rounded-lg p-6 md:p-8" style="border-color: var(--color-theme-stroke);">
      <form
        id="progressive-form"
        action="https://api.web3forms.com/submit"
        method="POST"
        class="needs-validation"
        novalidate
      >
        <input type="hidden" name="access_key" value={WEB3FORMS_KEY} />
        <input type="checkbox" class="hidden" style="display:none" name="botcheck" />

        <!-- Step 1: Basic Info -->
        <div class="form-step active" data-step="1">
          <div class="space-y-6">
            <div>
              <label for="company_size" class="block text-sm font-semibold theme-sub-headline mb-2">
                Company Size
              </label>
              <select
                id="company_size"
                name="company_size"
                required
                class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                style="border-color: var(--color-theme-stroke);"
              >
                <option value="">Select company size</option>
                <option value="1-10">1-10 employees</option>
                <option value="11-50">11-50 employees</option>
                <option value="51-200">51-200 employees</option>
                <option value="201-1000">201-1000 employees</option>
                <option value="1000+">1000+ employees</option>
              </select>
            </div>

            <div>
              <label for="industry" class="block text-sm font-semibold theme-sub-headline mb-2">
                Industry
              </label>
              <select
                id="industry"
                name="industry"
                required
                class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                style="border-color: var(--color-theme-stroke);"
              >
                <option value="">Select industry</option>
                <option value="technology">Technology</option>
                <option value="healthcare">Healthcare</option>
                <option value="finance">Finance</option>
                <option value="education">Education</option>
                <option value="retail">Retail</option>
                <option value="manufacturing">Manufacturing</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Step 2: Your Needs -->
        <div class="form-step" data-step="2">
          <div class="space-y-6">
            <div>
              <label class="block text-sm font-semibold theme-sub-headline mb-3">
                What are you looking to achieve? (Select all that apply)
              </label>
              <div class="space-y-3">
                {[
                  "Increase efficiency",
                  "Reduce costs",
                  "Improve customer satisfaction",
                  "Scale operations",
                  "Better reporting & analytics",
                  "Integration with existing tools"
                ].map((goal) => (
                  <label class="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                         style="border-color: var(--color-theme-stroke);">
                    <input
                      type="checkbox"
                      name="goals[]"
                      value={goal}
                      class="w-4 h-4 rounded border"
                      style="accent-color: var(--color-theme-button);"
                    />
                    <span class="theme-card-text">{goal}</span>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label for="timeline" class="block text-sm font-semibold theme-sub-headline mb-2">
                Implementation Timeline
              </label>
              <select
                id="timeline"
                name="timeline"
                required
                class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                style="border-color: var(--color-theme-stroke);"
              >
                <option value="">Select timeline</option>
                <option value="asap">ASAP (Within 1 month)</option>
                <option value="quarter">This quarter (1-3 months)</option>
                <option value="half-year">Next 6 months</option>
                <option value="year">Within a year</option>
                <option value="exploring">Just exploring options</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Step 3: Contact Details -->
        <div class="form-step" data-step="3">
          <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="first_name" class="block text-sm font-semibold theme-sub-headline mb-2">
                  First Name
                </label>
                <input
                  type="text"
                  id="first_name"
                  name="first_name"
                  required
                  class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                  style="border-color: var(--color-theme-stroke);"
                  placeholder="John"
                />
              </div>
              <div>
                <label for="last_name" class="block text-sm font-semibold theme-sub-headline mb-2">
                  Last Name
                </label>
                <input
                  type="text"
                  id="last_name"
                  name="last_name"
                  required
                  class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                  style="border-color: var(--color-theme-stroke);"
                  placeholder="Doe"
                />
              </div>
            </div>

            <div>
              <label for="email" class="block text-sm font-semibold theme-sub-headline mb-2">
                Work Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                style="border-color: var(--color-theme-stroke);"
                placeholder="john.doe@company.com"
              />
            </div>

            <div>
              <label for="phone" class="block text-sm font-semibold theme-sub-headline mb-2">
                Phone Number (Optional)
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                class="w-full px-4 py-3 border rounded-lg focus:outline-none theme-card-bg theme-card-text transition-colors"
                style="border-color: var(--color-theme-stroke);"
                placeholder="+1 (555) 123-4567"
              />
            </div>

            <!-- Privacy Notice -->
            <div class="pt-4 border-t" style="border-color: var(--color-theme-stroke); opacity: 0.3;">
              <div class="flex items-start gap-3">
                <Icon name="bx:bxs-lock-alt" class="w-5 h-5 mt-0.5 flex-shrink-0" style="color: var(--color-theme-button);" />
                <p class="text-sm theme-paragraph opacity-80">
                  Your information is secure and will never be shared. We'll only use it to provide you with a personalized consultation.
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Navigation Buttons -->
        <div class="flex justify-between mt-8 pt-6 border-t" style="border-color: var(--color-theme-stroke); opacity: 0.3;">
          <button
            type="button"
            id="prev-btn"
            class="px-6 py-3 rounded-lg theme-button-outline transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            disabled
          >
            <Icon name="bx:bx-left-arrow-alt" class="w-5 h-5 inline mr-2" />
            Previous
          </button>

          <button
            type="button"
            id="next-btn"
            class="px-6 py-3 rounded-lg theme-button-primary transition-all"
          >
            Next
            <Icon name="bx:bx-right-arrow-alt" class="w-5 h-5 inline ml-2" />
          </button>

          <button
            type="submit"
            id="submit-btn"
            class="px-8 py-3 rounded-lg theme-button-primary transition-all hidden"
          >
            <Icon name="bx:bx-rocket" class="w-5 h-5 inline mr-2" />
            {finalCtaText}
          </button>
        </div>

        <!-- Form Result -->
        <div id="form-result" class="mt-4 text-center theme-paragraph hidden"></div>
      </form>
    </div>

    <!-- Trust Indicators -->
    <div class="flex flex-wrap items-center justify-center gap-6 mt-8 text-sm theme-paragraph opacity-70">
      <div class="flex items-center gap-2">
        <Icon name="bx:bxs-shield" class="w-4 h-4" style="color: var(--color-theme-button);" />
        <span>SSL Secure</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon name="bx:bxs-time" class="w-4 h-4" style="color: var(--color-theme-button);" />
        <span>2 min to complete</span>
      </div>
      <div class="flex items-center gap-2">
        <Icon name="bx:bxs-user-check" class="w-4 h-4" style="color: var(--color-theme-button);" />
        <span>No spam, ever</span>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('progressive-form');
    const steps = document.querySelectorAll('.form-step');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const submitBtn = document.getElementById('submit-btn');
    const result = document.getElementById('form-result');
    let currentStep = 1;
    const totalSteps = steps.length;

    // Initialize form
    showStep(currentStep);

    // Navigation event listeners
    prevBtn.addEventListener('click', () => {
      if (currentStep > 1) {
        currentStep--;
        showStep(currentStep);
      }
    });

    nextBtn.addEventListener('click', () => {
      if (validateStep(currentStep)) {
        if (currentStep < totalSteps) {
          currentStep++;
          showStep(currentStep);
        }
      }
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validateStep(currentStep)) {
        return;
      }

      result.classList.remove('hidden');
      result.innerHTML = 'Sending your request...';
      result.style.color = 'var(--color-theme-paragraph)';

      const formData = new FormData(form);
      const object = Object.fromEntries(formData);
      
      // Handle checkbox arrays
      const goals = formData.getAll('goals[]');
      object.goals = goals.join(', ');
      
      const json = JSON.stringify(object);

      try {
        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: json,
        });

        const responseJson = await response.json();
        
        if (response.status === 200) {
          result.style.color = 'var(--color-theme-button)';
          result.innerHTML = '✅ Thank you! We\'ll contact you within 24 hours with your personalized consultation.';
          form.reset();
          currentStep = 1;
          showStep(currentStep);
        } else {
          throw new Error(responseJson.message || 'Something went wrong');
        }
      } catch (error) {
        result.style.color = 'var(--color-theme-stroke)';
        result.innerHTML = '❌ Something went wrong. Please try again.';
        console.error('Form submission error:', error);
      }
    });

    function showStep(step) {
      // Hide all steps
      steps.forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
      });
      
      // Show current step
      const currentStepEl = document.querySelector(`[data-step="${step}"]`);
      if (currentStepEl) {
        currentStepEl.classList.add('active');
        currentStepEl.style.display = 'block';
      }

      // Update progress indicators
      updateProgressBar(step);

      // Update buttons
      prevBtn.disabled = step === 1;
      
      if (step === totalSteps) {
        nextBtn.classList.add('hidden');
        submitBtn.classList.remove('hidden');
      } else {
        nextBtn.classList.remove('hidden');
        submitBtn.classList.add('hidden');
      }
    }

    function updateProgressBar(step) {
      for (let i = 1; i <= totalSteps; i++) {
        const indicator = document.querySelector(`[data-step-indicator="${i}"]`);
        const number = document.querySelector(`[data-step-number="${i}"]`);
        const check = document.querySelector(`[data-step-check="${i}"]`);
        const line = document.querySelector(`[data-step-line="${i}"]`);

        if (i < step) {
          // Completed step
          indicator.style.backgroundColor = 'var(--color-theme-button)';
          indicator.style.borderColor = 'var(--color-theme-button)';
          number.classList.add('hidden');
          check.classList.remove('hidden');
          if (line) {
            line.style.backgroundColor = 'var(--color-theme-button)';
            line.style.opacity = '1';
          }
        } else if (i === step) {
          // Current step
          indicator.style.backgroundColor = 'var(--color-theme-button)';
          indicator.style.borderColor = 'var(--color-theme-button)';
          number.style.color = 'var(--color-theme-bg)';
          number.classList.remove('hidden');
          check.classList.add('hidden');
        } else {
          // Future step
          indicator.style.backgroundColor = 'transparent';
          indicator.style.borderColor = 'var(--color-theme-stroke)';
          number.style.color = 'var(--color-theme-paragraph)';
          number.classList.remove('hidden');
          check.classList.add('hidden');
          if (line) {
            line.style.backgroundColor = 'var(--color-theme-stroke)';
            line.style.opacity = '0.3';
          }
        }
      }
    }

    function validateStep(step) {
      const currentStepEl = document.querySelector(`[data-step="${step}"]`);
      const requiredFields = currentStepEl.querySelectorAll('[required]');
      let valid = true;

      requiredFields.forEach(field => {
        if (!field.value.trim()) {
          field.style.borderColor = 'var(--color-theme-stroke)';
          field.focus();
          valid = false;
          return false;
        } else {
          field.style.borderColor = 'var(--color-theme-button)';
        }
      });

      // Special validation for step 2 (checkboxes)
      if (step === 2) {
        const checkboxes = currentStepEl.querySelectorAll('input[type="checkbox"]:checked');
        if (checkboxes.length === 0) {
          alert('Please select at least one goal.');
          valid = false;
        }
      }

      return valid;
    }
  });
</script>

<style>
  .form-step {
    display: none;
  }
  
  .form-step.active {
    display: block;
  }
  
  /* Focus styles */
  input:focus,
  select:focus {
    outline: 2px solid var(--color-theme-button);
    outline-offset: 2px;
  }
  
  /* Custom checkbox styling */
  input[type="checkbox"] {
    appearance: none;
    width: 1rem;
    height: 1rem;
    border: 2px solid var(--color-theme-stroke);
    border-radius: 0.25rem;
    position: relative;
    cursor: pointer;
  }
  
  input[type="checkbox"]:checked {
    background-color: var(--color-theme-button);
    border-color: var(--color-theme-button);
  }
  
  input[type="checkbox"]:checked::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--color-theme-bg);
    font-size: 0.75rem;
    font-weight: bold;
  }
</style>